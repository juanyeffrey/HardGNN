# TensorFlow 2.x Compatible Version for Google Colab
# This version uses tf.compat.v1 to maintain compatibility with the original TF 1.x code
# while working on modern Google Colab with Python 3.10+

import os
import numpy as np
import tensorflow as tf

# Enable TensorFlow 1.x behavior in TensorFlow 2.x
tf.compat.v1.disable_eager_execution()
tf.compat.v1.disable_v2_behavior()

# Import the original model but replace tensorflow imports
import sys
sys.path.append('.')

# Replace all tensorflow imports with compat.v1 versions
import importlib
import types

def create_tf_compat_module():
    """Create a compatibility module that maps TF 1.x APIs to TF 2.x compat.v1"""
    tf_compat = types.ModuleType('tensorflow_compat')
    
    # Map all commonly used TF 1.x functions to compat.v1
    tf_compat.Session = tf.compat.v1.Session
    tf_compat.ConfigProto = tf.compat.v1.ConfigProto
    tf_compat.placeholder = tf.compat.v1.placeholder
    tf_compat.variable_scope = tf.compat.v1.variable_scope
    tf_compat.get_variable = tf.compat.v1.get_variable
    tf_compat.layers = tf.compat.v1.layers
    tf_compat.nn = tf.compat.v1.nn
    tf_compat.train = tf.compat.v1.train
    tf_compat.global_variables_initializer = tf.compat.v1.global_variables_initializer
    tf_compat.set_random_seed = tf.compat.v1.set_random_seed
    tf_compat.reduce_mean = tf.compat.v1.reduce_mean
    tf_compat.reduce_sum = tf.compat.v1.reduce_sum
    tf_compat.matmul = tf.compat.v1.matmul
    tf_compat.expand_dims = tf.compat.v1.expand_dims
    tf_compat.concat = tf.compat.v1.concat
    tf_compat.zeros = tf.compat.v1.zeros
    tf_compat.ones = tf.compat.v1.ones
    tf_compat.random = tf.compat.v1.random
    tf_compat.random_normal = tf.compat.v1.random_normal
    tf_compat.random_uniform = tf.compat.v1.random_uniform
    tf_compat.truncated_normal = tf.compat.v1.truncated_normal
    tf_compat.maximum = tf.compat.v1.maximum
    tf_compat.minimum = tf.compat.v1.minimum
    tf_compat.clip_by_value = tf.compat.v1.clip_by_value
    tf_compat.gather = tf.compat.v1.gather
    tf_compat.scatter_nd = tf.compat.v1.scatter_nd
    tf_compat.reshape = tf.compat.v1.reshape
    tf_compat.transpose = tf.compat.v1.transpose
    tf_compat.squeeze = tf.compat.v1.squeeze
    tf_compat.split = tf.compat.v1.split
    tf_compat.stack = tf.compat.v1.stack
    tf_compat.unstack = tf.compat.v1.unstack
    tf_compat.tile = tf.compat.v1.tile
    tf_compat.where = tf.compat.v1.where
    tf_compat.cond = tf.compat.v1.cond
    tf_compat.case = tf.compat.v1.case
    tf_compat.while_loop = tf.compat.v1.while_loop
    tf_compat.control_dependencies = tf.compat.v1.control_dependencies
    tf_compat.get_default_graph = tf.compat.v1.get_default_graph
    tf_compat.name_scope = tf.compat.v1.name_scope
    tf_compat.GraphKeys = tf.compat.v1.GraphKeys
    tf_compat.add_to_collection = tf.compat.v1.add_to_collection
    tf_compat.get_collection = tf.compat.v1.get_collection
    tf_compat.summary = tf.compat.v1.summary
    tf_compat.saved_model = tf.compat.v1.saved_model
    tf_compat.gfile = tf.compat.v1.gfile
    tf_compat.logging = tf.compat.v1.logging
    tf_compat.flags = tf.compat.v1.flags
    tf_compat.app = tf.compat.v1.app
    
    # Special handling for protobuf
    try:
        from tensorflow.core.protobuf import config_pb2
        tf_compat.config_pb2 = config_pb2
    except ImportError:
        # Fallback for different TF versions
        tf_compat.config_pb2 = tf.compat.v1.config_pb2
    
    return tf_compat

# Replace the tensorflow module in sys.modules temporarily
original_tf = sys.modules.get('tensorflow')
sys.modules['tensorflow'] = create_tf_compat_module()

try:
    # Now import the original model
    from model import Recommender
    
    # Restore original tensorflow module
    if original_tf:
        sys.modules['tensorflow'] = original_tf
    
    print("✅ Successfully loaded TensorFlow 1.x compatible model for TensorFlow 2.x")
    print(f"TensorFlow version: {tf.__version__}")
    print("Using tf.compat.v1 compatibility layer")
    
except ImportError as e:
    print(f"❌ Error importing model: {e}")
    print("Make sure model.py is in the current directory")
    
    # Restore original tensorflow module
    if original_tf:
        sys.modules['tensorflow'] = original_tf

def create_tf2_compatible_session():
    """Create a TensorFlow 2.x compatible session configuration"""
    config = tf.compat.v1.ConfigProto()
    config.gpu_options.allow_growth = True
    config.allow_soft_placement = True
    
    # Additional TF 2.x compatibility settings
    config.experimental.mlir_bridge_rollout = tf.compat.v1.experimental.MlirBridgeRollout.OFF
    
    return config

def setup_tf2_environment():
    """Setup TensorFlow 2.x environment for compatibility"""
    # Disable TensorFlow 2.x eager execution
    tf.compat.v1.disable_eager_execution()
    
    # Disable TensorFlow 2.x behavior
    tf.compat.v1.disable_v2_behavior()
    
    # Set memory growth for GPU if available
    physical_devices = tf.config.list_physical_devices('GPU')
    if physical_devices:
        try:
            for device in physical_devices:
                tf.config.experimental.set_memory_growth(device, True)
            print(f"✅ GPU memory growth enabled for {len(physical_devices)} device(s)")
        except RuntimeError as e:
            print(f"⚠️  Could not set GPU memory growth: {e}")
    
    print("✅ TensorFlow 2.x environment configured for TF 1.x compatibility")

# Example usage function
def run_hardgnn_tf2_compatible():
    """Run HardGNN with TensorFlow 2.x compatibility"""
    setup_tf2_environment()
    
    # Import other required modules
    from Params import args
    import Utils.TimeLogger as logger
    from Utils.TimeLogger import log
    from DataHandler import DataHandler
    import random
    
    # Set random seeds
    np.random.seed(100)
    random.seed(100)
    tf.compat.v1.set_random_seed(100)
    
    # Setup session configuration
    config = create_tf2_compatible_session()
    
    # Initialize data handler
    handler = DataHandler()
    handler.LoadData()
    log('✅ Data loaded successfully')
    
    # Create TensorFlow session
    with tf.compat.v1.Session(config=config) as sess:
        print("✅ TensorFlow 2.x compatible session created")
        print(f"Available devices: {[device.name for device in sess.list_devices()]}")
        
        # Initialize model
        try:
            recom = Recommender(sess, handler)
            print("✅ HardGNN model initialized successfully")
            
            # Run training
            recom.run()
            
        except Exception as e:
            print(f"❌ Error during model execution: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    run_hardgnn_tf2_compatible() 